[{"/mnt/h/XDev/Home/project-collections/client/src/index.js":"1","/mnt/h/XDev/Home/project-collections/client/src/reportWebVitals.js":"2","/mnt/h/XDev/Home/project-collections/client/src/App.js":"3","/mnt/h/XDev/Home/project-collections/client/src/auth/Login.jsx":"4","/mnt/h/XDev/Home/project-collections/client/src/auth/Signup.jsx":"5","/mnt/h/XDev/Home/project-collections/client/src/admin/Admin.jsx":"6","/mnt/h/XDev/Home/project-collections/client/src/admin/TableRow.jsx":"7","/mnt/h/XDev/Home/project-collections/client/src/profile/Profile.jsx":"8","/mnt/h/XDev/Home/project-collections/client/src/profile/TableRowCollection.jsx":"9","/mnt/h/XDev/Home/project-collections/client/src/main/Main.jsx":"10","/mnt/h/XDev/Home/project-collections/client/src/core/context.jsx":"11","/mnt/h/XDev/Home/project-collections/client/src/collection/Collection.jsx":"12","/mnt/h/XDev/Home/project-collections/client/src/items/ItemList.jsx":"13","/mnt/h/XDev/Home/project-collections/client/src/comments/CommentForm.jsx":"14","/mnt/h/XDev/Home/project-collections/client/src/comments/Comment.jsx":"15","/mnt/h/XDev/Home/project-collections/client/src/items/ItemPrev.jsx":"16","/mnt/h/XDev/Home/project-collections/client/src/collection/CollectionPrev.jsx":"17","/mnt/h/XDev/Home/project-collections/client/src/items/Item.jsx":"18","/mnt/h/XDev/Home/project-collections/client/src/main/Footer.jsx":"19","/mnt/h/XDev/Home/project-collections/client/src/main/Header.jsx":"20","/mnt/h/XDev/Home/project-collections/client/src/items/ItemForm.jsx":"21","/mnt/h/XDev/Home/project-collections/client/src/collection/CollectionForm.jsx":"22","/mnt/h/XDev/Home/project-collections/client/src/profile/ProfileCard.jsx":"23","/mnt/h/XDev/Home/project-collections/client/src/collection/Field.jsx":"24","/mnt/h/XDev/Home/project-collections/client/src/drops/DropImageBox.jsx":"25","/mnt/h/XDev/Home/project-collections/client/src/items/CustomFields.jsx":"26","/mnt/h/XDev/Home/project-collections/client/src/comments/CommentBox.jsx":"27","/mnt/h/XDev/Home/project-collections/client/src/items/Likes.jsx":"28","/mnt/h/XDev/Home/project-collections/client/src/auth/GoogleAuth.jsx":"29","/mnt/h/XDev/Home/project-collections/client/src/collection/CollectionTable.jsx":"30","/mnt/h/XDev/Home/project-collections/client/src/profile/ColorModeSwitchButton.jsx":"31","/mnt/h/XDev/Home/project-collections/client/src/profile/LanguageSwitchButton.jsx":"32","/mnt/h/XDev/Home/project-collections/client/src/i18n.js":"33"},{"size":305,"mtime":1611507737752,"results":"34","hashOfConfig":"35"},{"size":362,"mtime":1609251387818,"results":"36","hashOfConfig":"35"},{"size":4192,"mtime":1611694637678,"results":"37","hashOfConfig":"35"},{"size":2735,"mtime":1611695624952,"results":"38","hashOfConfig":"35"},{"size":2938,"mtime":1610970798571,"results":"39","hashOfConfig":"35"},{"size":3949,"mtime":1610537818236,"results":"40","hashOfConfig":"35"},{"size":753,"mtime":1611695445801,"results":"41","hashOfConfig":"35"},{"size":3348,"mtime":1611570776307,"results":"42","hashOfConfig":"35"},{"size":2153,"mtime":1611651059497,"results":"43","hashOfConfig":"35"},{"size":3742,"mtime":1611568094555,"results":"44","hashOfConfig":"35"},{"size":690,"mtime":1611217436999,"results":"45","hashOfConfig":"35"},{"size":3507,"mtime":1611732103117,"results":"46","hashOfConfig":"35"},{"size":1670,"mtime":1611514289643,"results":"47","hashOfConfig":"35"},{"size":1581,"mtime":1611565012669,"results":"48","hashOfConfig":"35"},{"size":709,"mtime":1611225964510,"results":"49","hashOfConfig":"35"},{"size":1686,"mtime":1611695337199,"results":"50","hashOfConfig":"35"},{"size":1730,"mtime":1611695241499,"results":"51","hashOfConfig":"35"},{"size":7943,"mtime":1611695318955,"results":"52","hashOfConfig":"35"},{"size":667,"mtime":1611158713857,"results":"53","hashOfConfig":"35"},{"size":3662,"mtime":1611513176007,"results":"54","hashOfConfig":"35"},{"size":5914,"mtime":1611571849163,"results":"55","hashOfConfig":"35"},{"size":5997,"mtime":1611733702072,"results":"56","hashOfConfig":"35"},{"size":3181,"mtime":1611512103814,"results":"57","hashOfConfig":"35"},{"size":559,"mtime":1611225088694,"results":"58","hashOfConfig":"35"},{"size":1559,"mtime":1610549403996,"results":"59","hashOfConfig":"35"},{"size":3412,"mtime":1611228807540,"results":"60","hashOfConfig":"35"},{"size":1457,"mtime":1611564929393,"results":"61","hashOfConfig":"35"},{"size":1292,"mtime":1611225751155,"results":"62","hashOfConfig":"35"},{"size":1329,"mtime":1611695995783,"results":"63","hashOfConfig":"35"},{"size":6514,"mtime":1611733588092,"results":"64","hashOfConfig":"35"},{"size":759,"mtime":1611227679565,"results":"65","hashOfConfig":"35"},{"size":920,"mtime":1611568672357,"results":"66","hashOfConfig":"35"},{"size":4130,"mtime":1611567870752,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"blk22b",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"70"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"70"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"70"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"70"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"70"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"70"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"70"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"70"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"70"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"70"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"/mnt/h/XDev/Home/project-collections/client/src/index.js",[],["145","146"],"/mnt/h/XDev/Home/project-collections/client/src/reportWebVitals.js",[],"/mnt/h/XDev/Home/project-collections/client/src/App.js",["147","148"],"import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { BrowserRouter as Router, Switch, Route, Redirect} from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"@yaireo/tagify/dist/tagify.css\"\nimport './App.css';\n\nimport Header from './main/Header';\nimport Footer from './main/Footer';\nimport Login from './auth/Login';\nimport Signup from './auth/Signup';\nimport Admin from './admin/Admin';\nimport Profile from './profile/Profile';\nimport Main from './main/Main';\nimport Collection from './collection/Collection';\nimport CollectionTable from './collection/CollectionTable';\nimport CollectionForm from './collection/CollectionForm';\nimport ItemList from './items/ItemList';\nimport ItemForm from './items/ItemForm';\n\nimport {AuthContext, ColorContext, colormods} from './core/context';\n\nfunction App() {\n    const { t, i18n } = useTranslation();\n\n    let isAuth, isAdmin, userId, username, colormode, lang;\n    const data = JSON.parse(localStorage.getItem('userData'))\n    if (data && data.token) {\n        isAuth = true;\n        isAdmin = data.user.staff;\n        userId = data.user._id;\n        username = data.user.username;\n        colormode = data.user.colormode;\n        lang = data.user.lang;\n    } else {\n        isAuth = false;\n        isAdmin = false;\n        userId = null\n        username = null\n        colormode = 'light'\n        lang = 'en'\n    }\n\n    if ( localStorage.getItem('langData') === null ) {\n        localStorage.setItem('langData', lang)\n    }\n\n    let tmpcolor = '';\n    if (localStorage.getItem('colorData')) {\n        tmpcolor = JSON.parse(localStorage.getItem('colorData'));\n    } else {\n        tmpcolor = colormods[colormode];\n        localStorage.setItem('colorData', JSON.stringify(tmpcolor))\n    }\n    const [state, setState] = React.useState( {colormode: tmpcolor} )\n    const togleColormode = () => { setState((state) => {\n        let tmp = (state.colormode.name === 'light') ? colormods.dark : colormods.light;\n\n        localStorage.setItem('colorData', JSON.stringify(tmp));\n        return {colormode: tmp};\n    })}\n\n    return (\n        <AuthContext.Provider value={{ isAuth, isAdmin, username, userId, colormode, lang}}>\n        <ColorContext.Provider value={{colormode: state.colormode, togleColormode: togleColormode }}>\n        <Router>\n            <div className=\"container\">\n                <Header />\n                    { isAuth ?\n                        <Switch>\n                            <Route path=\"/profile/:profileUserName\" exact> <Profile /> </Route>\n                            {isAdmin ? <Route path=\"/admin\" exact> <Admin /> </Route> : ''}\n                            <Route path=\"/collection/create/:profile_name\" exact> <CollectionForm /> </Route>\n                            <Route path=\"/collection/create_item/:collection_id\"> <ItemForm /> </Route>\n                            <Route path=\"/collection/:collId\" exact> <Collection /> </Route>\n                            <Route path=\"/items/:subject\" exact> <ItemList /> </Route>\n                            <Route path=\"/search/:subject\" exact> <ItemList /> </Route>\n                            <Route path=\"/table/:collId\" exact> <CollectionTable /> </Route>\n                            <Route path=\"/\" exact> <Main /> </Route>\n                            <Redirect to=\"/\"/>\n                        </Switch>\n                        :\n                        <Switch>\n                            <Route path=\"/login\" exact> <Login /> </Route>\n                            <Route path=\"/signup\" exact> <Signup /> </Route>\n                            <Route path=\"/collection/:collId\" exact> <Collection /> </Route>\n                            <Route path=\"/items/:subject\" exact> <ItemList /> </Route>\n                            <Route path=\"/search/:subject\" exact> <ItemList /> </Route>\n                            <Route path=\"/\" exact> <Main /> </Route>\n                            <Redirect to=\"/login\"/>\n                        </Switch>\n                    }\n                <Footer />\n            </div>\n        </Router>\n        </ColorContext.Provider>\n        </AuthContext.Provider>\n    );\n}\n\nexport default App;\n","/mnt/h/XDev/Home/project-collections/client/src/auth/Login.jsx",[],"/mnt/h/XDev/Home/project-collections/client/src/auth/Signup.jsx",[],"/mnt/h/XDev/Home/project-collections/client/src/admin/Admin.jsx",[],"/mnt/h/XDev/Home/project-collections/client/src/admin/TableRow.jsx",[],"/mnt/h/XDev/Home/project-collections/client/src/profile/Profile.jsx",["149"],"import React, {useState, useEffect, useContext} from 'react';\r\nimport {useParams} from \"react-router-dom\";\r\nimport {Table, Button, Card} from 'react-bootstrap';\r\nimport axios from 'axios';\r\nimport {AuthContext, ColorContext} from '../core/context';\r\nimport { withTranslation } from 'react-i18next';\r\nimport ProfileCard from './ProfileCard';\r\nimport TableRowCollection from './TableRowCollection';\r\n\r\nexport default withTranslation()(function Profile({ t, i18n }) {\r\n    const { profileUserName } = useParams()\r\n    const {isAdmin, username} = useContext(AuthContext);\r\n    const [profile, setProfile] = useState({\r\n        userdata: {\r\n            username: \"\",\r\n            email: \"\",\r\n            created: \"\",\r\n            collections: []\r\n        },\r\n        collections: []\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (isAdmin || profileUserName === username) {\r\n            let params = { username: profileUserName}\r\n            axios.get('/api/profile', {params})\r\n            .then((res)=>{\r\n                setProfile({userdata: res.data.userdata, collections: res.data.collections})\r\n            })\r\n            .catch((err)=>{console.log(err)})\r\n        } else {\r\n            window.location.replace('/')\r\n        }\r\n\r\n    }, [])\r\n\r\n    return (\r\n        <ColorContext.Consumer>\r\n            {({colormode}) => (\r\n            <div>\r\n                <ProfileCard userData={profile.userdata} t={t} i18n={i18n}/>\r\n                <Card className= {`${colormode.asClasses} my-1`}>\r\n                    <Card.Header as=\"h5\">{t('profile_collections')}:</Card.Header>\r\n                    <Card.Body>\r\n                        <Table size=\"sm\" bordered hover responsive variant={colormode.table}>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th colSpan=\"7\">\r\n                                        <Button\r\n                                            className=\"my-2\"\r\n                                            variant=\"outline-success\"\r\n                                            as=\"a\"\r\n                                            href={`/collection/create/${profileUserName}`}\r\n                                            >{t('profile_create')}</Button>\r\n                                    </th>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th></th>\r\n                                    <th>{t('profile_table_name')}<small> ({t('profile_table_small')}) </small> </th>\r\n                                    <th>{t('profile_image_url')}</th>\r\n                                    <th>{t('profile_theme')}</th>\r\n                                    <th>{t('profile_items')}</th>\r\n                                    <th>{t('profile_created')}</th>\r\n\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                { profile.collections.map( (coll, index) => {\r\n                                    return <TableRowCollection  data={coll} key={index} colormode={colormode}/>\r\n                                })}\r\n                            </tbody>\r\n                        </Table>\r\n                    </Card.Body>\r\n                </Card>\r\n            </div>\r\n            )}\r\n        </ColorContext.Consumer>\r\n    )\r\n})\r\n","/mnt/h/XDev/Home/project-collections/client/src/profile/TableRowCollection.jsx",[],"/mnt/h/XDev/Home/project-collections/client/src/main/Main.jsx",["150"],"import React, {useState, useEffect, useContext} from 'react';\r\nimport {Row, Col, Container, Badge, Jumbotron} from 'react-bootstrap';\r\nimport axios from 'axios';\r\nimport {ColorContext} from '../core/context';\r\nimport { withTranslation } from 'react-i18next';\r\n\r\nimport ItemPrev from '../items/ItemPrev';\r\nimport CollectionPrev from '../collection/CollectionPrev';\r\n\r\nexport default withTranslation()(function Main({t}) {\r\n    const {colormode} = useContext(ColorContext);\r\n    const [loading, setLoading] = useState(true);\r\n    const [lastItems, setlastItems] = useState();\r\n    const [largeColls, setLargeColls] = useState();\r\n    const [tagCloud, setTagCloud] = useState();\r\n\r\n    useEffect(()=>{\r\n        if (!lastItems) {\r\n            axios.get('/api/items/last')\r\n            .then((res)=>{\r\n                setlastItems(res.data.last)})\r\n            .catch((err)=>{console.log(err)})\r\n        }\r\n        if (!largeColls) {\r\n            axios.get('/api/collection/largest')\r\n            .then((res)=>{\r\n                setLargeColls(res.data.largest)})\r\n            .catch((err)=>{console.log(err)})\r\n        }\r\n        if (!tagCloud) {\r\n            axios.get('/api/tag')\r\n            .then((res)=>{\r\n                setTagCloud(res.data.tags)})\r\n            .catch((err)=>{console.log(err)})\r\n        }\r\n        setLoading(false)\r\n    }, [])\r\n\r\n    if (loading){return ''} else {\r\n    return (\r\n        <Container fluid className={\"my-2\" + colormode.asClasses}>\r\n            <Row>\r\n                <Col lg={10}>\r\n                    <Row>\r\n                        <Jumbotron className={\"w-100 text-center\" + colormode.asClasses}>\r\n                            <Container>\r\n                                <h1>\r\n                                    <span> {t('main_welcom_to')} </span>\r\n                                    <strong className=\"decor-brand-text\">Collections</strong>\r\n                                </h1>\r\n                                <p>\r\n                                    {t('main_welcom_small')}\r\n                                </p>\r\n                            </Container>\r\n                        </Jumbotron>\r\n                    </Row>\r\n                    <Row className=\"mb-4 justify-content-center\">\r\n                        <Col lg={12}><h4> {t('main_last')}:</h4></Col>\r\n                        {lastItems ? lastItems.map((item, index)=>{\r\n                            return (<ItemPrev data={item} key={index} colormode={colormode} t={t}/>)\r\n                        }):\"\"}\r\n                    </Row>\r\n                    <Row className=\"mb-4 justify-content-center\">\r\n                        <Col lg={12}><h4> {t('main_largest')}:</h4></Col>\r\n                            {largeColls ? largeColls.map((coll, index)=>{\r\n                                return (<CollectionPrev data={coll} key={index} colormode={colormode} t={t}/>)\r\n                            }):\"\"}\r\n                    </Row>\r\n                </Col>\r\n                <Col lg={2}>\r\n                    <div className=\"my-2\">\r\n                        <h5> {t('main_tags')}: </h5>\r\n                        {tagCloud ? tagCloud.map((tag, index)=>{\r\n                            return (\r\n                                <Badge\r\n                                    key={index}\r\n                                    as=\"a\"\r\n                                    href={`/items/${tag.name}`}\r\n                                    className=\"mx-1 d-inline-block\"\r\n                                    variant=\"secondary\">\r\n                                    {tag.name}\r\n                                </Badge>)\r\n                        }):\"\"}\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )}\r\n})\r\n","/mnt/h/XDev/Home/project-collections/client/src/core/context.jsx",[],"/mnt/h/XDev/Home/project-collections/client/src/collection/Collection.jsx",["151","152"],"/mnt/h/XDev/Home/project-collections/client/src/items/ItemList.jsx",["153"],"import React, {useState, useEffect, useContext} from 'react';\r\nimport {Card, Row} from 'react-bootstrap';\r\nimport {useParams, useLocation} from \"react-router-dom\";\r\nimport axios from 'axios';\r\nimport {ColorContext} from '../core/context';\r\nimport ItemPrev from './ItemPrev';\r\nimport { withTranslation } from 'react-i18next';\r\n\r\nexport default withTranslation()(function ItemList({t}) {\r\n    const {colormode} = useContext(ColorContext)\r\n    const [items, setItems] = useState([])\r\n    const {subject} = useParams();\r\n    const location = useLocation();\r\n\r\n    useEffect(()=>{\r\n        let params, address;\r\n        if (location.pathname.startsWith('/search')) {\r\n            params = {search: subject};\r\n            address = '/api/items/search';\r\n        } else {\r\n            params = {tag_name: subject};\r\n            address = '/api/items/withtag';\r\n        }\r\n        if (items.length === 0) {\r\n            axios.get(address, {params})\r\n            .then((res)=>{\r\n                setItems(res.data.items)\r\n            })\r\n            .catch((err)=>{console.log(err)})\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <Card className={\"my-1 pt-3 border-secondary\" + colormode.asClasses}>\r\n            <Card.Title className=\"ml-3\">{`${ t('search_message') } \"${ subject }\":`}</Card.Title>\r\n            <Card.Body>\r\n                <Row>\r\n                {items.length ? items.map((item, index) => { return (\r\n                    <ItemPrev data={item} key={index} colormode={colormode} t={t}/>\r\n                )}) : <span className=\"mx-auto my-4\">{ t('search_message_empty') }</span> }\r\n                </Row>\r\n            </Card.Body>\r\n        </Card>\r\n\r\n    )\r\n})\r\n","/mnt/h/XDev/Home/project-collections/client/src/comments/CommentForm.jsx",[],"/mnt/h/XDev/Home/project-collections/client/src/comments/Comment.jsx",[],"/mnt/h/XDev/Home/project-collections/client/src/items/ItemPrev.jsx",[],"/mnt/h/XDev/Home/project-collections/client/src/collection/CollectionPrev.jsx",[],"/mnt/h/XDev/Home/project-collections/client/src/items/Item.jsx",["154","155","156","157","158","159"],"import React, {useContext, useState} from 'react';\r\nimport {Card, Col, Row, Button, Badge, Table, Tab, Tabs} from 'react-bootstrap';\r\nimport {TrashFill, PenFill } from 'react-bootstrap-icons';\r\nimport ReactMarkdown from 'react-markdown'\r\nimport {AuthContext} from '../core/context';\r\nimport axios from 'axios';\r\n\r\nimport CommentBox from '../comments/CommentBox';\r\nimport Likes from './Likes';\r\n\r\nexport default function Item(props) {\r\n    const [key, setKey] = useState('item');\r\n    const {isAdmin, userId} = useContext(AuthContext);\r\n    const [isDel, setIsDel] = useState(false)\r\n\r\n    const deleteHandle = ()=>{\r\n        axios.post('/api/items/delete', {item_id: props.data._id})\r\n        setIsDel(true)\r\n    }\r\n\r\n    if (isDel) {return ''} else {\r\n        return (\r\n            <Row>\r\n                <Card\r\n                    border={props.colormode.text}\r\n                    bg={props.colormode.back}\r\n                    text={props.colormode.text}\r\n                    className=\"my-2 mx-auto w-100\">\r\n                    <Card.Title className='p-1'>\r\n                        <span className=\"mx-2\">{props.data.name}</span>\r\n\r\n                        {props.owner ?\r\n                            <span>\r\n                                <Button size=\"sm\" variant=\"outline-danger\"\r\n                                    className=\"float-right mx-1 px-2\"\r\n                                    onClick={deleteHandle}>\r\n                                    <TrashFill color=\"red\" />\r\n                                </Button>\r\n                                <Button\r\n                                    as=\"a\"\r\n                                    href={`#`}\r\n                                    size=\"sm\"\r\n                                    variant=\"outline-secondary\"\r\n                                    className=\"float-right mx-1 px-2\">\r\n                                    <PenFill color=\"gray\" />\r\n                                </Button>\r\n                            </span>\r\n                            : '' }\r\n\r\n                    </Card.Title>\r\n                    <Card.Body>\r\n                        <Tabs activeKey={key} className=\"mx-auto\" onSelect={(k) => setKey(k)}>\r\n                            <Tab eventKey=\"item\" title={props.t('item')} tabClassName={props.colormode.asClasses}>\r\n                                <Row className=\"mt-4\">\r\n                                    <Col md={5}>\r\n                                        <Card.Img\r\n                                            variant=\"top\"\r\n                                            src={`${props.data.image_url}` || '/static/noimage.jpg'}\r\n                                            fluid\r\n                                            rounded\r\n                                            className=\"border border-secondary\"\r\n                                            />\r\n                                        {props.data.tags_id.map((tag, index) => {\r\n                                            return (\r\n                                                <Badge\r\n                                                    className=\"mx-1\"\r\n                                                    variant=\"secondary\"\r\n                                                    key={index}\r\n                                                    > {tag.name}\r\n                                                </Badge>)\r\n                                        })}\r\n                                    </Col>\r\n                                    <Col md={7}>\r\n                                        <Card.Body>\r\n                                            <Table size=\"sm\" borderless striped variant={props.colormode.table}>\r\n                                                <tbody>\r\n\r\n                                                    {props.data.fieldset_id.fields.slice(0, 6).map((f, i)=>{\r\n                                                        if (f) {return(\r\n                                                            <tr key={i}><td className=\"font-weight-bold\">{f.name}</td>\r\n                                                            <td>{f.value}</td></tr>\r\n                                                    )}})}\r\n\r\n                                                    {props.data.fieldset_id.fields.slice(9, 12).map((f, i)=>{\r\n                                                        if (f) {return(\r\n                                                            <tr key={i}><td className=\"font-weight-bold\">{f.name}</td>\r\n                                                            <td>{new Date(f.value).toLocaleDateString()}</td></tr>\r\n                                                    )}})}\r\n\r\n                                                    {props.data.fieldset_id.fields.slice(12, 15).map((f, i)=>{\r\n                                                        if (f) {return(\r\n                                                            <tr key={i}><td className=\"font-weight-bold\">{f.name}</td>\r\n                                                            <td>{f.value ? 'Yes': 'No'}</td></tr>\r\n                                                    )}})}\r\n\r\n                                                </tbody>\r\n                                            </Table>\r\n                                        </Card.Body>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                    {props.data.fieldset_id.fields.slice(6, 9).map((f, i)=>{\r\n                                        if (f) {return(\r\n                                            <Row key={i}>\r\n                                                <Col md={12} className=\"text-center\">{f.name}</Col>\r\n                                                <Col md={12} className=\"\">\r\n                                                    <div className={\"rounded p-1 my-1\" + props.colormode.asClasses}>\r\n                                                        <ReactMarkdown children={f.value}/>\r\n                                                    </div>\r\n                                                </Col>\r\n                                            </Row>\r\n                                        )}\r\n                                    })}\r\n\r\n                                    <Row className=\"mb-3\">\r\n                                        <Col md={12} className=\"text-center\">\r\n                                            <Likes startCount={props.data.like_list.length} itemId={props.data._id}/>\r\n                                        </Col>\r\n                                    </Row>\r\n\r\n                                    <Row>\r\n                                        <Col md={12} >\r\n                                            <small\r\n                                                className=\"text-muted float-right\">\r\n                                                {new Date(props.data.created).toLocaleDateString()}\r\n                                            </small>\r\n                                        </Col>\r\n                                    </Row>\r\n\r\n                                </Tab>\r\n                                <Tab\r\n                                    eventKey=\"comments\"\r\n                                    title={props.t('item_comments')}\r\n                                    tabClassName={props.colormode.asClasses}>\r\n                                    <Card.Body>\r\n                                        <CommentBox\r\n                                            itemId={props.data._id}\r\n                                            isOpen={(key === 'comments')}\r\n                                            colormode={props.colormode}\r\n                                            t={props.t}/>\r\n                                    </Card.Body>\r\n                                </Tab>\r\n                    </Tabs>\r\n                </Card.Body>\r\n            </Card>\r\n        </Row>\r\n    )\r\n}}\r\n","/mnt/h/XDev/Home/project-collections/client/src/main/Footer.jsx",["160","161"],"import React from 'react';\r\nimport { ColorContext } from '../core/context';\r\n\r\nexport default function Footer() {\r\n    return (\r\n        <ColorContext.Consumer>\r\n            {({colormode}) => (\r\n                <footer className={\"container text-center mt-2 py-2 \" + colormode.asClasses}>\r\n                    <p>\r\n                        © 2020-2021 Bla-Bla-Company, Inc.  ·\r\n                        <a href=\"#\"> BadLink#1 </a>\r\n                          ·\r\n                        <a href=\"#\"> BadLink#2 </a>\r\n                        <span></span>\r\n                    </p>\r\n                </footer>\r\n            )}\r\n        </ColorContext.Consumer>\r\n    )\r\n}\r\n","/mnt/h/XDev/Home/project-collections/client/src/main/Header.jsx",[],"/mnt/h/XDev/Home/project-collections/client/src/items/ItemForm.jsx",["162"],"import React, {useState, useEffect, useContext} from 'react';\r\nimport {Card, Form, Button, Col} from 'react-bootstrap';\r\nimport {useParams} from \"react-router-dom\";\r\nimport Tags from \"@yaireo/tagify/dist/react.tagify\"\r\nimport axios from 'axios';\r\nimport {ColorContext} from '../core/context';\r\nimport DropImageBox from '../drops/DropImageBox';\r\nimport CustomFields from './CustomFields';\r\n\r\nexport default function ItemForm() {\r\n    const {colormode} = useContext(ColorContext)\r\n    const {collection_id} = useParams();\r\n    const [scheme, setScheme] = useState([])\r\n    const [inputTags, setInputTags] = useState([])\r\n    const [whiteList, setWhiteList] = useState()\r\n    const [formData, setFormData] = useState({name: \"\"})\r\n    const [fieldsData, setFieldsData] = useState(new Array(15).fill(false))\r\n    const [prevUrl, setPrevUrl] = useState()\r\n    const [fileCont, setFileCont] = useState()\r\n\r\n    const onDropHandle = (afiles, rfiles, event) => {\r\n        if (afiles.length !== 0) {\r\n            let reader = new FileReader();\r\n            reader.onloadend = () => {\r\n                let url = reader.result\r\n                setPrevUrl(url);\r\n            }\r\n            reader.readAsDataURL(afiles[0])\r\n            setFileCont(afiles)\r\n        }\r\n    }\r\n\r\n    const tagsChangeHandle = (event) => {\r\n        event.persist();\r\n        let tags = []\r\n        let data = event.target.value ? JSON.parse(event.target.value): []\r\n        for (let i in data) {\r\n            tags.push(data[i].value);\r\n        }\r\n        setInputTags(tags);\r\n    }\r\n\r\n    const formChangeHandle = (event) => {\r\n        setFormData({...formData, [event.target.name]: event.target.value});\r\n    }\r\n\r\n    const fieldsChangeHandle = (event) => {\r\n        let tempData = fieldsData;\r\n        if (event.target.type === \"checkbox\") {\r\n            tempData[parseInt(event.target.id)] = event.target.checked;\r\n        } else if (event.target.type === \"number\") {\r\n            tempData[parseInt(event.target.id)] = parseInt(event.target.value);\r\n        } else if (event.target.type === \"date\") {\r\n            tempData[parseInt(event.target.id)] = new Date(event.target.value);\r\n        } else {\r\n            tempData[parseInt(event.target.id)] = event.target.value;\r\n        }\r\n        setFieldsData(tempData)\r\n    }\r\n\r\n    const formSubmitHandle = (event) => {\r\n        event.preventDefault();\r\n        axios.post('/api/collection/add', {\r\n            name: formData.name,\r\n            fields: fieldsData,\r\n            coll_id: collection_id,\r\n            tags: inputTags,\r\n            scheme: scheme\r\n        })\r\n        .then((res) => {\r\n            const item_id = res.data.item_id;\r\n            const data = new FormData();\r\n            data.append(\"item_id\", item_id);\r\n            data.append('image', fileCont[0]);\r\n            const config = {headers: {'Content-Type': 'multipart/form-data'}};\r\n            axios.post('/api/collection/image', data, config)\r\n            .then((res) => {\r\n                window.location.replace(`/collection/${collection_id}`)\r\n            })\r\n            .catch((err) => { console.log(err) });\r\n        })\r\n        .catch((err) => { console.log(err) })\r\n    }\r\n\r\n    useEffect( () => {\r\n        if (scheme.length === 0) {\r\n            axios.post('/api/collection/scheme', {coll_id: collection_id})\r\n            .then((res)=>{\r\n                setScheme(res.data)\r\n            })\r\n            .catch((err)=>{ })\r\n        }\r\n        if (!whiteList){\r\n            axios.get('/api/tag')\r\n            .then((res)=>{\r\n                let temp = [];\r\n                res.data.tags.forEach( (tag) => { temp.push(tag.name) }); setWhiteList(temp)})\r\n            .catch((err)=>{ console.log(err) })\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Card className={\"my-1\" + colormode.asClasses}>\r\n                <Form className={colormode.asClasses} onSubmit={formSubmitHandle}>\r\n                    <Card.Title className=\"text-center my-4\"> {'Create new item'}</Card.Title>\r\n                    <Form.Row className=\"justify-content-center\">\r\n                        <Col lg={4}>\r\n                            <Form.Group>\r\n                                <DropImageBox onDrop={onDropHandle} successFlag={prevUrl} prev={prevUrl}/>\r\n                            </Form.Group>\r\n                        </Col>\r\n                    </Form.Row>\r\n                    <Form.Row className=\"justify-content-center\">\r\n                        <Col lg={6} className=\"align-middle\">\r\n                            <Form.Group >\r\n                                <Form.Label > Item Name: </Form.Label>\r\n                                <Form.Control\r\n                                    required={true}\r\n                                    onChange={formChangeHandle}\r\n                                    type=\"text\"\r\n                                    name=\"name\"\r\n                                    className={colormode.asClasses}/>\r\n                            </Form.Group>\r\n                            <Form.Group>\r\n                                <Tags\r\n                                    value=''\r\n                                    whitelist={whiteList}\r\n                                    onChange={tagsChangeHandle}\r\n                                    placeholder=\"Tags\"\r\n                                    className={\"form-control form-control-sm c-tag border-light\" + colormode.asClasses}/>\r\n                            </Form.Group>\r\n                        </Col>\r\n                    </Form.Row>\r\n                    <Form.Row className=\"justify-content-center\">\r\n                        <CustomFields scheme={scheme} onChangeFunc={fieldsChangeHandle} colormode={colormode}/>\r\n                    </Form.Row>\r\n                    <Button variant=\"light\" type=\"submit\" className=\"float-right w-25\"> Create </Button>\r\n                </Form>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n","/mnt/h/XDev/Home/project-collections/client/src/collection/CollectionForm.jsx",[],"/mnt/h/XDev/Home/project-collections/client/src/profile/ProfileCard.jsx",[],"/mnt/h/XDev/Home/project-collections/client/src/collection/Field.jsx",[],"/mnt/h/XDev/Home/project-collections/client/src/drops/DropImageBox.jsx",["163","164","165","166"],"import React from 'react';\r\nimport Dropzone, {useDropzone} from 'react-dropzone'\r\n\r\nexport default function DropImageBox(props) {\r\n    const {getRootProps, getInputProps, acceptedFiles, fileRejections} = useDropzone()\r\n    return (\r\n        <Dropzone\r\n            onDrop={props.onDrop}\r\n            onDragEnter={(event)=>{event.target.classList.toggle ('dropbox-active')}}\r\n            onDragLeave={(event)=>{event.target.classList.toggle ('dropbox-active')}}\r\n            accept=\"image/jpg, image/jpeg, image/png\"\r\n            maxFiles={1}\r\n            maxSize={500000}\r\n            >\r\n            {({getRootProps, getInputProps}) => (\r\n                <section className=\"text-center\">\r\n                    <div {...getRootProps()}\r\n                        className={props.prev ?\r\n                            \"rounded  dropbox dropbox-success mx-auto\":\r\n                            \"rounded  dropbox mx-auto\"}\r\n                        style={{\r\n                            \"background-position\": \"center\",\r\n                            \"background-size\": \"contain\",\r\n                            \"background-image\": `url(${props.prev})`,\r\n                            \"background-origin\": \"content-box\",\r\n                            \"background-repeat\": \"no-repeat\"\r\n                        }}\r\n                        >\r\n                        <input {...getInputProps()}/>\r\n                        {props.prev ? '' : <p> Click here  or drop image</p>}\r\n                    </div>\r\n                </section>\r\n            )}\r\n        </Dropzone>\r\n    )\r\n}\r\n","/mnt/h/XDev/Home/project-collections/client/src/items/CustomFields.jsx",[],"/mnt/h/XDev/Home/project-collections/client/src/comments/CommentBox.jsx",["167"],"import React, {useState, useEffect} from 'react';\r\nimport {Row, Col} from 'react-bootstrap';\r\nimport axios from 'axios';\r\n\r\nimport Comment from './Comment';\r\nimport CommentForm from './CommentForm';\r\n\r\nexport default function CommentBox(props) {\r\n    const [firstLoad, setFirstLoad] = useState(true)\r\n    const [comments, setComments] = useState([])\r\n    const [intID, setIntID] = useState(null)\r\n\r\n    const getComments = ()=>{\r\n        let params = {itemId: props.itemId}\r\n        axios.get('/api/comments', {params})\r\n        .then((res)=>{\r\n            setComments(res.data.comments)\r\n        })\r\n        .catch((err)=>{ console.log(err) })\r\n    }\r\n\r\n    useEffect(()=>{\r\n        if (firstLoad) { getComments(); setFirstLoad(false); }\r\n        if (props.isOpen && !intID) {\r\n            setIntID( setInterval(()=>{ getComments() }, 4999) );\r\n        } else if (!props.isOpen && intID) {\r\n            clearInterval(intID);\r\n            setIntID(null)\r\n        }\r\n    }, [props.isOpen])\r\n\r\n    return (\r\n        <Row className=\"mt-4 mx-auto\">\r\n            <Col lg={12} >\r\n                {comments.map((comment, index)=> <Comment data={comment} key={index} colormode={props.colormode}/>)}\r\n                <CommentForm\r\n                    itemId={props.itemId}\r\n                    onSubmitGetComment={()=>{getComments()}}\r\n                    colormode={props.colormode}\r\n                    t={props.t}/>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n","/mnt/h/XDev/Home/project-collections/client/src/items/Likes.jsx",[],"/mnt/h/XDev/Home/project-collections/client/src/auth/GoogleAuth.jsx",["168"],"import React, {useState} from 'react';\r\nimport { GoogleLogin } from 'react-google-login';\r\nimport axios from 'axios';\r\n\r\n\r\nexport default function GoogleAuth(props) {\r\n    const responseGoogle = (response) => {\r\n        props.setLoadingState(true)\r\n        console.log(response.profileObj);\r\n        axios.post('/api/auth/google_signin', {googleProfileObj: response.profileObj})\r\n        .then((res)=>{\r\n            console.log(res);\r\n            localStorage.clear()\r\n            localStorage.setItem('userData' , JSON.stringify({...res.data}));\r\n            window.location.replace('/')\r\n        })\r\n        .catch((err)=>{ console.log(err) })\r\n        props.setLoadingState(false)\r\n    }\r\n\r\n    return (\r\n        <GoogleLogin\r\n            clientId={process.env.REACT_APP_GOOGLE_CLIENT_ID}\r\n            render={renderProps => (\r\n                <button\r\n                    className=\"btn-sm btn-light btn-block my-1\"\r\n                    onClick={renderProps.onClick}\r\n                    disabled={renderProps.disabled}>\r\n                    Google\r\n                </button>\r\n            )}\r\n            onSuccess={responseGoogle}\r\n            onFailure={(res) => { console.error(res) }}\r\n            cookiePolicy={'single_host_origin'}\r\n            redirectUri={process.env.REACT_APP_REDIRECT_URI}\r\n          />\r\n    )\r\n}\r\n","/mnt/h/XDev/Home/project-collections/client/src/collection/CollectionTable.jsx",["169","170","171","172","173","174","175","176"],"/mnt/h/XDev/Home/project-collections/client/src/profile/ColorModeSwitchButton.jsx",[],"/mnt/h/XDev/Home/project-collections/client/src/profile/LanguageSwitchButton.jsx",[],"/mnt/h/XDev/Home/project-collections/client/src/i18n.js",[],{"ruleId":"177","replacedBy":"178"},{"ruleId":"179","replacedBy":"180"},{"ruleId":"181","severity":1,"message":"182","line":24,"column":13,"nodeType":"183","messageId":"184","endLine":24,"endColumn":14},{"ruleId":"181","severity":1,"message":"185","line":24,"column":16,"nodeType":"183","messageId":"184","endLine":24,"endColumn":20},{"ruleId":"186","severity":1,"message":"187","line":35,"column":8,"nodeType":"188","endLine":35,"endColumn":10,"suggestions":"189"},{"ruleId":"186","severity":1,"message":"190","line":37,"column":8,"nodeType":"188","endLine":37,"endColumn":10,"suggestions":"191"},{"ruleId":"181","severity":1,"message":"192","line":14,"column":12,"nodeType":"183","messageId":"184","endLine":14,"endColumn":18},{"ruleId":"186","severity":1,"message":"193","line":30,"column":7,"nodeType":"188","endLine":30,"endColumn":9,"suggestions":"194"},{"ruleId":"186","severity":1,"message":"195","line":31,"column":8,"nodeType":"188","endLine":31,"endColumn":10,"suggestions":"196"},{"ruleId":"181","severity":1,"message":"197","line":13,"column":12,"nodeType":"183","messageId":"184","endLine":13,"endColumn":19},{"ruleId":"181","severity":1,"message":"198","line":13,"column":21,"nodeType":"183","messageId":"184","endLine":13,"endColumn":27},{"ruleId":"199","severity":1,"message":"200","line":78,"column":106,"nodeType":"201","messageId":"202","endLine":78,"endColumn":108},{"ruleId":"199","severity":1,"message":"200","line":84,"column":107,"nodeType":"201","messageId":"202","endLine":84,"endColumn":109},{"ruleId":"199","severity":1,"message":"200","line":90,"column":108,"nodeType":"201","messageId":"202","endLine":90,"endColumn":110},{"ruleId":"199","severity":1,"message":"200","line":102,"column":90,"nodeType":"201","messageId":"202","endLine":102,"endColumn":92},{"ruleId":"203","severity":1,"message":"204","line":11,"column":25,"nodeType":"205","endLine":11,"endColumn":37},{"ruleId":"203","severity":1,"message":"204","line":13,"column":25,"nodeType":"205","endLine":13,"endColumn":37},{"ruleId":"186","severity":1,"message":"206","line":100,"column":8,"nodeType":"188","endLine":100,"endColumn":10,"suggestions":"207"},{"ruleId":"181","severity":1,"message":"208","line":5,"column":12,"nodeType":"183","messageId":"184","endLine":5,"endColumn":24},{"ruleId":"181","severity":1,"message":"209","line":5,"column":26,"nodeType":"183","messageId":"184","endLine":5,"endColumn":39},{"ruleId":"181","severity":1,"message":"210","line":5,"column":41,"nodeType":"183","messageId":"184","endLine":5,"endColumn":54},{"ruleId":"181","severity":1,"message":"211","line":5,"column":56,"nodeType":"183","messageId":"184","endLine":5,"endColumn":70},{"ruleId":"186","severity":1,"message":"212","line":30,"column":8,"nodeType":"188","endLine":30,"endColumn":22,"suggestions":"213"},{"ruleId":"181","severity":1,"message":"214","line":1,"column":16,"nodeType":"183","messageId":"184","endLine":1,"endColumn":24},{"ruleId":"181","severity":1,"message":"215","line":9,"column":8,"nodeType":"183","messageId":"184","endLine":9,"endColumn":12},{"ruleId":"181","severity":1,"message":"192","line":17,"column":12,"nodeType":"183","messageId":"184","endLine":17,"endColumn":18},{"ruleId":"181","severity":1,"message":"197","line":17,"column":20,"nodeType":"183","messageId":"184","endLine":17,"endColumn":27},{"ruleId":"181","severity":1,"message":"198","line":17,"column":29,"nodeType":"183","messageId":"184","endLine":17,"endColumn":35},{"ruleId":"181","severity":1,"message":"216","line":19,"column":12,"nodeType":"183","messageId":"184","endLine":19,"endColumn":24},{"ruleId":"181","severity":1,"message":"217","line":19,"column":26,"nodeType":"183","messageId":"184","endLine":19,"endColumn":41},{"ruleId":"186","severity":1,"message":"193","line":79,"column":8,"nodeType":"188","endLine":79,"endColumn":10,"suggestions":"218"},{"ruleId":"181","severity":1,"message":"219","line":83,"column":13,"nodeType":"183","messageId":"184","endLine":83,"endColumn":26},"no-native-reassign",["220"],"no-negated-in-lhs",["221"],"no-unused-vars","'t' is assigned a value but never used.","Identifier","unusedVar","'i18n' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'isAdmin', 'profileUserName', and 'username'. Either include them or remove the dependency array.","ArrayExpression",["222"],"React Hook useEffect has missing dependencies: 'largeColls', 'lastItems', and 'tagCloud'. Either include them or remove the dependency array.",["223"],"'isAuth' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'collId' and 'collection'. Either include them or remove the dependency array.",["224"],"React Hook useEffect has missing dependencies: 'items.length', 'location.pathname', and 'subject'. Either include them or remove the dependency array.",["225"],"'isAdmin' is assigned a value but never used.","'userId' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","React Hook useEffect has missing dependencies: 'collection_id', 'scheme.length', and 'whiteList'. Either include them or remove the dependency array.",["226"],"'getRootProps' is assigned a value but never used.","'getInputProps' is assigned a value but never used.","'acceptedFiles' is assigned a value but never used.","'fileRejections' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'firstLoad', 'getComments', and 'intID'. Either include them or remove the dependency array.",["227"],"'useState' is defined but never used.","'Item' is defined but never used.","'checkedItems' is assigned a value but never used.","'setCheckedItems' is assigned a value but never used.",["228"],"'getTableProps' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"229","fix":"230"},{"desc":"231","fix":"232"},{"desc":"233","fix":"234"},{"desc":"235","fix":"236"},{"desc":"237","fix":"238"},{"desc":"239","fix":"240"},{"desc":"233","fix":"241"},"Update the dependencies array to be: [isAdmin, profileUserName, username]",{"range":"242","text":"243"},"Update the dependencies array to be: [largeColls, lastItems, tagCloud]",{"range":"244","text":"245"},"Update the dependencies array to be: [collId, collection]",{"range":"246","text":"247"},"Update the dependencies array to be: [items.length, location.pathname, subject]",{"range":"248","text":"249"},"Update the dependencies array to be: [collection_id, scheme.length, whiteList]",{"range":"250","text":"251"},"Update the dependencies array to be: [firstLoad, getComments, intID, props.isOpen]",{"range":"252","text":"253"},{"range":"254","text":"247"},[1237,1239],"[isAdmin, profileUserName, username]",[1344,1346],"[largeColls, lastItems, tagCloud]",[1077,1079],"[collId, collection]",[1093,1095],"[items.length, location.pathname, subject]",[3723,3725],"[collection_id, scheme.length, whiteList]",[973,987],"[firstLoad, getComments, intID, props.isOpen]",[3144,3146]]