[{"/mnt/h/XDev/Home/project-collections/client/src/index.js":"1","/mnt/h/XDev/Home/project-collections/client/src/reportWebVitals.js":"2","/mnt/h/XDev/Home/project-collections/client/src/App.js":"3","/mnt/h/XDev/Home/project-collections/client/src/auth/Login.jsx":"4","/mnt/h/XDev/Home/project-collections/client/src/auth/Signup.jsx":"5","/mnt/h/XDev/Home/project-collections/client/src/admin/Admin.jsx":"6","/mnt/h/XDev/Home/project-collections/client/src/admin/TableRow.jsx":"7","/mnt/h/XDev/Home/project-collections/client/src/profile/Profile.jsx":"8","/mnt/h/XDev/Home/project-collections/client/src/profile/TableRowCollection.jsx":"9","/mnt/h/XDev/Home/project-collections/client/src/main/Main.jsx":"10","/mnt/h/XDev/Home/project-collections/client/src/core/context.jsx":"11","/mnt/h/XDev/Home/project-collections/client/src/collection/Collection.jsx":"12","/mnt/h/XDev/Home/project-collections/client/src/items/ItemList.jsx":"13","/mnt/h/XDev/Home/project-collections/client/src/comments/CommentForm.jsx":"14","/mnt/h/XDev/Home/project-collections/client/src/comments/Comment.jsx":"15","/mnt/h/XDev/Home/project-collections/client/src/items/ItemPrev.jsx":"16","/mnt/h/XDev/Home/project-collections/client/src/collection/CollectionPrev.jsx":"17","/mnt/h/XDev/Home/project-collections/client/src/items/Item.jsx":"18","/mnt/h/XDev/Home/project-collections/client/src/main/Footer.jsx":"19","/mnt/h/XDev/Home/project-collections/client/src/main/Header.jsx":"20","/mnt/h/XDev/Home/project-collections/client/src/items/ItemForm.jsx":"21","/mnt/h/XDev/Home/project-collections/client/src/collection/CollectionForm.jsx":"22","/mnt/h/XDev/Home/project-collections/client/src/profile/ProfileCard.jsx":"23","/mnt/h/XDev/Home/project-collections/client/src/collection/Field.jsx":"24","/mnt/h/XDev/Home/project-collections/client/src/drops/DropImageBox.jsx":"25","/mnt/h/XDev/Home/project-collections/client/src/items/CustomFields.jsx":"26","/mnt/h/XDev/Home/project-collections/client/src/comments/CommentBox.jsx":"27","/mnt/h/XDev/Home/project-collections/client/src/items/Likes.jsx":"28","/mnt/h/XDev/Home/project-collections/client/src/auth/GoogleAuth.jsx":"29","/mnt/h/XDev/Home/project-collections/client/src/auth/YandexAuth.jsx":"30","/mnt/h/XDev/Home/project-collections/client/src/collection/CollectionTable.jsx":"31","/mnt/h/XDev/Home/project-collections/client/src/profile/ColorModeSwitchButton.jsx":"32"},{"size":288,"mtime":1611159969006,"results":"33","hashOfConfig":"34"},{"size":362,"mtime":1609251387818,"results":"35","hashOfConfig":"34"},{"size":3892,"mtime":1611228561887,"results":"36","hashOfConfig":"34"},{"size":2741,"mtime":1611150468254,"results":"37","hashOfConfig":"34"},{"size":2938,"mtime":1610970798571,"results":"38","hashOfConfig":"34"},{"size":3949,"mtime":1610537818236,"results":"39","hashOfConfig":"34"},{"size":794,"mtime":1609599149741,"results":"40","hashOfConfig":"34"},{"size":3057,"mtime":1611158297520,"results":"41","hashOfConfig":"34"},{"size":1925,"mtime":1611150468308,"results":"42","hashOfConfig":"34"},{"size":3657,"mtime":1611225792814,"results":"43","hashOfConfig":"34"},{"size":690,"mtime":1611217436999,"results":"44","hashOfConfig":"34"},{"size":3171,"mtime":1611226503374,"results":"45","hashOfConfig":"34"},{"size":1592,"mtime":1611226076464,"results":"46","hashOfConfig":"34"},{"size":1534,"mtime":1611225927829,"results":"47","hashOfConfig":"34"},{"size":709,"mtime":1611225964510,"results":"48","hashOfConfig":"34"},{"size":1694,"mtime":1611225708544,"results":"49","hashOfConfig":"34"},{"size":1701,"mtime":1611225160930,"results":"50","hashOfConfig":"34"},{"size":7224,"mtime":1611226466379,"results":"51","hashOfConfig":"34"},{"size":667,"mtime":1611158713857,"results":"52","hashOfConfig":"34"},{"size":3543,"mtime":1611158953376,"results":"53","hashOfConfig":"34"},{"size":5875,"mtime":1611226211970,"results":"54","hashOfConfig":"34"},{"size":6113,"mtime":1611225034264,"results":"55","hashOfConfig":"34"},{"size":2526,"mtime":1611227099056,"results":"56","hashOfConfig":"34"},{"size":559,"mtime":1611225088694,"results":"57","hashOfConfig":"34"},{"size":1559,"mtime":1610549403996,"results":"58","hashOfConfig":"34"},{"size":3412,"mtime":1611228807540,"results":"59","hashOfConfig":"34"},{"size":1426,"mtime":1611225885809,"results":"60","hashOfConfig":"34"},{"size":1292,"mtime":1611225751155,"results":"61","hashOfConfig":"34"},{"size":1316,"mtime":1610970616870,"results":"62","hashOfConfig":"34"},{"size":526,"mtime":1611150468257,"results":"63","hashOfConfig":"34"},{"size":6243,"mtime":1611224936964,"results":"64","hashOfConfig":"34"},{"size":759,"mtime":1611227679565,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"blk22b",{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"68"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"68"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"68"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"68"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"68"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"68"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"68"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"68"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"68"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"68"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"68"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"68"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"68"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/mnt/h/XDev/Home/project-collections/client/src/index.js",[],["144","145"],"/mnt/h/XDev/Home/project-collections/client/src/reportWebVitals.js",[],"/mnt/h/XDev/Home/project-collections/client/src/App.js",[],"/mnt/h/XDev/Home/project-collections/client/src/auth/Login.jsx",["146"],"import React, {useState} from 'react';\r\nimport {Form, Button, Card} from 'react-bootstrap';\r\nimport axios from 'axios';\r\n\r\nimport GoogleAuth from './GoogleAuth';\r\nimport YandexAuth from './YandexAuth';\r\n\r\nexport default function Login() {\r\n    const [isLoading, setLoading] = useState(false);\r\n    const [formData, setFormData] = useState({username: \"\", password: \"\"})\r\n    const handleChange = (event) => {\r\n        setFormData({...formData, [event.target.name]: event.target.value});\r\n    }\r\n    const handleSubmit = async (event) => {\r\n        setLoading(true);\r\n        event.preventDefault();\r\n        await axios.post('/api/auth/signin', {...formData})\r\n        .then( (res) => {\r\n            localStorage.setItem('userData' , JSON.stringify({...res.data}));\r\n            window.location.replace('/')\r\n        } )\r\n        .catch( (err) => {\r\n            if (err.response.status === 400) {\r\n                document.getElementById('error-msg-js').textContent = \"Invalid Username/Password\"\r\n                setTimeout(()=>{document.getElementById('error-msg-js').textContent = \"\"}, 2000)\r\n            }\r\n        } )\r\n        setLoading(false);\r\n    }\r\n    return (\r\n        <div className=\"card-form-wrap\">\r\n            <Card className=\"text-white bg-dark my-3\">\r\n                <Card.Header as=\"h5\">Sign In</Card.Header>\r\n                <Card.Body>\r\n                    <Form className=\"card-form mx-3\" onSubmit={handleSubmit}>\r\n                        <Form.Group controlId=\"formBasicUssername\">\r\n                            <Form.Label>Username</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"Username\" name=\"username\" onChange={handleChange}/>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"formBasicPassword\">\r\n                            <Form.Label>Password</Form.Label>\r\n                            <Form.Control type=\"password\" placeholder=\"Password\" name=\"password\" onChange={handleChange}/>\r\n                            <Form.Text className=\"text-danger \">\r\n                                <span id=\"error-msg-js\"></span>\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n                        <Form.Group >\r\n                            <Button size=\"sm\" className=\"my-1 btn-block\" variant=\"success\" type=\"submit\" disabled={isLoading}>\r\n                                {isLoading ? 'Loading…' : 'Sign In'}\r\n                            </Button>\r\n                            <div> or ... </div>\r\n                            <GoogleAuth setLoadingState={setLoading}/>\r\n\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Card.Body>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n","/mnt/h/XDev/Home/project-collections/client/src/auth/Signup.jsx",[],"/mnt/h/XDev/Home/project-collections/client/src/admin/Admin.jsx",[],"/mnt/h/XDev/Home/project-collections/client/src/admin/TableRow.jsx",[],"/mnt/h/XDev/Home/project-collections/client/src/profile/Profile.jsx",["147"],"import React, {useState, useEffect, useContext} from 'react';\r\nimport {useParams} from \"react-router-dom\";\r\nimport {Table, Button, Card} from 'react-bootstrap';\r\nimport axios from 'axios';\r\nimport {AuthContext, ColorContext} from '../core/context';\r\n\r\nimport ProfileCard from './ProfileCard';\r\nimport TableRowCollection from './TableRowCollection';\r\n\r\nexport default function Profile(props) {\r\n    const { profileUserName } = useParams()\r\n    const {isAdmin, username} = useContext(AuthContext);\r\n    const [profile, setProfile] = useState({\r\n        userdata: {\r\n            username: \"\",\r\n            email: \"\",\r\n            created: \"\",\r\n            collections: []\r\n        },\r\n        collections: []\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (isAdmin || profileUserName === username) {\r\n            axios.post('/api/profile', { \"username\": profileUserName})\r\n            .then((res)=>{\r\n                setProfile({userdata: res.data.userdata, collections: res.data.collections})\r\n            })\r\n            .catch((err)=>{console.log(err)})\r\n        } else {\r\n            window.location.replace('/')\r\n        }\r\n\r\n    }, [])\r\n\r\n    return (\r\n        <ColorContext.Consumer>\r\n            {({colormode}) => (\r\n            <div>\r\n                <ProfileCard userData={profile.userdata}/>\r\n                <Card className= {`${colormode.asClasses} my-1`}>\r\n                    <Card.Header as=\"h5\">Collections:</Card.Header>\r\n                    <Card.Body>\r\n                        <Table size=\"sm\" bordered hover responsive variant={colormode.table}>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th colSpan=\"7\">\r\n                                        <Button\r\n                                            className=\"my-2\"\r\n                                            variant=\"outline-success\"\r\n                                            as=\"a\"\r\n                                            href={`/collection/create/${profileUserName}`}\r\n                                            >Create new collection</Button>\r\n                                    </th>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th></th>\r\n                                    <th>Image</th>\r\n                                    <th>Name</th>\r\n                                    <th>Theme</th>\r\n                                    <th>Items</th>\r\n                                    <th>Created</th>\r\n\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                { profile.collections.map( (coll, index) => {\r\n                                    return <TableRowCollection  data={coll} key={index}/>\r\n                                })}\r\n                            </tbody>\r\n                        </Table>\r\n                    </Card.Body>\r\n                </Card>\r\n            </div>\r\n            )}\r\n        </ColorContext.Consumer>\r\n    )\r\n}\r\n","/mnt/h/XDev/Home/project-collections/client/src/profile/TableRowCollection.jsx",[],"/mnt/h/XDev/Home/project-collections/client/src/main/Main.jsx",["148"],"import React, {useState, useEffect, useContext} from 'react';\r\nimport {Row, Col, Container, Badge, Jumbotron} from 'react-bootstrap';\r\nimport axios from 'axios';\r\nimport {ColorContext} from '../core/context';\r\nimport ItemPrev from '../items/ItemPrev';\r\nimport CollectionPrev from '../collection/CollectionPrev';\r\n\r\nexport default function Main() {\r\n    const {colormode} = useContext(ColorContext);\r\n    const [loading, setLoading] = useState(true)\r\n    const [lastItems, setlastItems] = useState()\r\n    const [largeColls, setLargeColls] = useState()\r\n    const [tagCloud, setTagCloud] = useState()\r\n\r\n    useEffect(()=>{\r\n        if (!lastItems) {\r\n            axios.get('/api/items/last')\r\n            .then((res)=>{\r\n                setlastItems(res.data.last)})\r\n            .catch((err)=>{console.log(err)})\r\n        }\r\n        if (!largeColls) {\r\n            axios.get('/api/collection/largest')\r\n            .then((res)=>{\r\n                setLargeColls(res.data.largest)})\r\n            .catch((err)=>{console.log(err)})\r\n        }\r\n        if (!tagCloud) {\r\n            axios.get('/api/tag')\r\n            .then((res)=>{\r\n                setTagCloud(res.data.tags)})\r\n            .catch((err)=>{console.log(err)})\r\n        }\r\n        setLoading(false)\r\n    }, [])\r\n\r\n    if (loading){return ''} else {\r\n    return (\r\n        <Container fluid className={\"my-2\" + colormode.asClasses}>\r\n            <Row>\r\n                <Col lg={10}>\r\n                    <Row>\r\n                        <Jumbotron className={\"w-100 text-center\" + colormode.asClasses}>\r\n                            <Container>\r\n                                <h1>\r\n                                    <span> Welcom to </span>\r\n                                    <strong className=\"decor-brand-text\">Collections</strong>\r\n                                </h1>\r\n                                <p>\r\n                                    Here is a small message for visitors about this site.\r\n                                </p>\r\n                            </Container>\r\n                        </Jumbotron>\r\n                    </Row>\r\n                    <Row className=\"mb-4 justify-content-center\">\r\n                        <Col lg={12}><h4> Last added items:</h4></Col>\r\n                        {lastItems ? lastItems.map((item, index)=>{\r\n                            return (<ItemPrev data={item} key={index} colormode={colormode}/>)\r\n                        }):\"\"}\r\n                    </Row>\r\n                    <Row className=\"mb-4 justify-content-center\">\r\n                        <Col lg={12}><h4> Largest collections:</h4></Col>\r\n                            {largeColls ? largeColls.map((coll, index)=>{\r\n                                return (<CollectionPrev data={coll} key={index} colormode={colormode}/>)\r\n                            }):\"\"}\r\n                    </Row>\r\n                </Col>\r\n                <Col lg={2}>\r\n                    <div className=\"my-2\">\r\n                        <h5> Tags: </h5>\r\n                        {tagCloud ? tagCloud.map((tag, index)=>{\r\n                            return (\r\n                                <Badge\r\n                                    key={index}\r\n                                    as=\"a\"\r\n                                    href={`/items/${tag.name}`}\r\n                                    className=\"mx-1 d-inline-block\"\r\n                                    variant=\"secondary\">\r\n                                    {tag.name}\r\n                                </Badge>)\r\n                        }):\"\"}\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )}\r\n}\r\n","/mnt/h/XDev/Home/project-collections/client/src/core/context.jsx",[],"/mnt/h/XDev/Home/project-collections/client/src/collection/Collection.jsx",["149","150"],"import React, {useContext, useState, useEffect} from 'react';\r\nimport {useParams} from \"react-router-dom\";\r\nimport {Card, Button, Col, Row, Badge} from 'react-bootstrap';\r\nimport axios from 'axios';\r\nimport ReactMarkdown from 'react-markdown'\r\n\r\nimport Item from '../items/Item';\r\nimport {AuthContext, ColorContext} from '../core/context';\r\n\r\nexport default function Collection() {\r\n    const {collId} = useParams();\r\n    const [loading, setLoading] = useState(true)\r\n    const {isAuth, isAdmin, userId} = useContext(AuthContext);\r\n    const {colormode} = useContext(ColorContext);\r\n    const [collection, setCollection] = useState()\r\n\r\n    useEffect(()=>{\r\n        if (!collection) {\r\n            let params = {collection_id: collId}\r\n            axios.get('/api/collection', {params})\r\n            .then((res)=>{\r\n                setCollection(res.data);\r\n                setLoading(false)\r\n            })\r\n            .catch((err)=>{\r\n                console.log(err);\r\n            })\r\n        }\r\n    },[])\r\n\r\n    if (loading){return ''} else {\r\n    return (\r\n        <Card className={\"m-1 p-2\" + colormode.asClasses}>\r\n            {isAdmin || userId===collection.user_id ?\r\n                <Card.Title>\r\n                    <span> {collection.name} </span>\r\n                    <Button\r\n                        size=\"sm\"\r\n                        variant=\"outline-secondary\"\r\n                        className=\"float-right mx-1 px-2\"\r\n                        onClick={()=>{}}>\r\n                        Edit Collection\r\n                    </Button>\r\n                    <Button\r\n                        size=\"sm\"\r\n                        variant=\"outline-secondary\"\r\n                        className=\"float-right mx-1 px-2\"\r\n                        as=\"a\"\r\n                        href={`/collection/create_item/${collection._id}`}>\r\n                        Add Item\r\n                    </Button>\r\n                </Card.Title>\r\n            :\r\n                <Card.Title> {collection.name} </Card.Title>\r\n            }\r\n            <Card.Body>\r\n                <Row>\r\n                    <Col lg={3}>\r\n                        <Card.Img src={`/static/${collection.image_url}`}/>\r\n                        <strong ># {collection.user_id.username.toUpperCase()} </strong>\r\n                        {collection.user_id.status ? <Badge variant=\"danger\">Banned</Badge>: ''}\r\n                        <Badge variant=\"warning\">admin</Badge>\r\n                        <br/>\r\n                        <small className=\"text-muted\"> {new Date(collection.created).toLocaleDateString()} </small>\r\n                        <br/>\r\n                        <small><ReactMarkdown children={collection.description}/></small>\r\n                        <div className=\"border-bottom\"></div>\r\n                    </Col>\r\n                    <Col lg={9}>\r\n                        { collection.items.map((data, index) => {\r\n                            return <Item key={index} data={data} owner={isAdmin || userId===collection.user_id} colormode={colormode}/>\r\n                        })}\r\n                    </Col>\r\n                </Row>\r\n            </Card.Body>\r\n        </Card>\r\n    )}\r\n}\r\n","/mnt/h/XDev/Home/project-collections/client/src/items/ItemList.jsx",["151"],"import React, {useState, useEffect, useContext} from 'react';\r\nimport {Card, Row} from 'react-bootstrap';\r\nimport {useParams, useLocation} from \"react-router-dom\";\r\nimport axios from 'axios';\r\nimport {ColorContext} from '../core/context';\r\nimport ItemPrev from './ItemPrev';\r\n\r\nexport default function ItemList() {\r\n    const {colormode} = useContext(ColorContext)\r\n    const [items, setItems] = useState([])\r\n    const {subject} = useParams();\r\n    const location = useLocation();\r\n\r\n    useEffect(()=>{\r\n        let params, address;\r\n        if (location.pathname.startsWith('/search')) {\r\n            params = {search: subject};\r\n            address = '/api/items/search';\r\n        } else {\r\n            params = {tag_name: subject};\r\n            address = '/api/items/withtag';\r\n        }\r\n        if (items.length === 0) {\r\n            axios.get(address, {params})\r\n            .then((res)=>{\r\n                setItems(res.data.items)\r\n            })\r\n            .catch((err)=>{console.log(err)})\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <Card className={\"my-1 pt-3 border-secondary\" + colormode.asClasses}>\r\n            <Card.Title className=\"ml-3\">{`All items with \"${subject}\":`}</Card.Title>\r\n            <Card.Body>\r\n                <Row>\r\n                {items.length ? items.map((item, index) => { return (\r\n                    <ItemPrev data={item} key={index} colormode={colormode}/>\r\n                )}) : <span className=\"mx-auto my-4\">{\" There's nothing here ¯\\\\_(ツ)_/¯ \"}</span> }\r\n                </Row>\r\n            </Card.Body>\r\n        </Card>\r\n\r\n    )\r\n}\r\n","/mnt/h/XDev/Home/project-collections/client/src/comments/CommentForm.jsx",[],"/mnt/h/XDev/Home/project-collections/client/src/comments/Comment.jsx",[],"/mnt/h/XDev/Home/project-collections/client/src/items/ItemPrev.jsx",[],"/mnt/h/XDev/Home/project-collections/client/src/collection/CollectionPrev.jsx",[],"/mnt/h/XDev/Home/project-collections/client/src/items/Item.jsx",["152","153","154","155","156","157"],"import React, {useContext, useState} from 'react';\r\nimport {Card, Col, Row, Button, Badge, Table, Tab, Tabs} from 'react-bootstrap';\r\nimport {TrashFill, PenFill } from 'react-bootstrap-icons';\r\nimport ReactMarkdown from 'react-markdown'\r\nimport {AuthContext} from '../core/context';\r\nimport axios from 'axios';\r\n\r\nimport CommentBox from '../comments/CommentBox';\r\nimport Likes from './Likes';\r\n\r\nexport default function Item(props) {\r\n    const [key, setKey] = useState('item');\r\n    const {isAdmin, userId} = useContext(AuthContext);\r\n\r\n    const deleteHandle = ()=>{\r\n        axios.post('/api/items/delete', {item_id: props.data._id})\r\n    }\r\n\r\n    return (\r\n        <Row>\r\n            <Card\r\n                border={props.colormode.text}\r\n                bg={props.colormode.back}\r\n                text={props.colormode.text}\r\n                className=\"my-2 mx-auto w-100\">\r\n                <Card.Title className='p-1'>\r\n                    <span className=\"mx-2\">{props.data.name}</span>\r\n\r\n                    {props.owner ?\r\n                        <span>\r\n                            <Button size=\"sm\" variant=\"outline-danger\"\r\n                                className=\"float-right mx-1 px-2\"\r\n                                onClick={deleteHandle}>\r\n                                <TrashFill color=\"red\" />\r\n                            </Button>\r\n                            <Button size=\"sm\" variant=\"outline-secondary\" className=\"float-right mx-1 px-2\">\r\n                                <PenFill color=\"gray\" />\r\n                            </Button>\r\n                        </span>\r\n                        : '' }\r\n\r\n                    </Card.Title>\r\n                    <Card.Body>\r\n                        <Tabs activeKey={key} className=\"mx-auto\" onSelect={(k) => setKey(k)}>\r\n                            <Tab eventKey=\"item\" title=\"Item\" tabClassName={props.colormode.asClasses}>\r\n                                <Row className=\"mt-4\">\r\n                                    <Col md={5}>\r\n                                        <Card.Img\r\n                                            variant=\"top\"\r\n                                            src={`/static/${props.data.image_url}` || '/static/noimage.jpg'}\r\n                                            fluid\r\n                                            rounded\r\n                                            className=\"border border-secondary\"\r\n                                            />\r\n                                        {props.data.tags_id.map((tag, index) => {\r\n                                            return (<Badge className=\"mx-1\" variant=\"secondary\" key={index}> {tag.name} </Badge>)\r\n                                        })}\r\n                                    </Col>\r\n                                    <Col md={7}>\r\n                                        <Card.Body>\r\n                                            <Table size=\"sm\" borderless striped variant={props.colormode.table}>\r\n                                                <tbody>\r\n\r\n                                                    {props.data.fieldset_id.fields.slice(0, 6).map((f, i)=>{\r\n                                                        if (f) {return(\r\n                                                            <tr key={i}><td className=\"font-weight-bold\">{f.name}</td>\r\n                                                            <td>{f.value}</td></tr>\r\n                                                        )}})}\r\n\r\n                                                        {props.data.fieldset_id.fields.slice(9, 12).map((f, i)=>{\r\n                                                            if (f) {return(\r\n                                                                <tr key={i}><td className=\"font-weight-bold\">{f.name}</td>\r\n                                                                <td>{new Date(f.value).toLocaleDateString()}</td></tr>\r\n                                                            )}})}\r\n\r\n                                                            {props.data.fieldset_id.fields.slice(12, 15).map((f, i)=>{\r\n                                                                if (f) {return(\r\n                                                                    <tr key={i}><td className=\"font-weight-bold\">{f.name}</td>\r\n                                                                    <td>{f.value ? 'Yes': 'No'}</td></tr>\r\n                                                                )}})}\r\n\r\n                                                            </tbody>\r\n                                                        </Table>\r\n                                                    </Card.Body>\r\n                                                </Col>\r\n                                            </Row>\r\n\r\n                                            {props.data.fieldset_id.fields.slice(6, 9).map((f, i)=>{\r\n                                                if (f) {return(\r\n                                                    <Row key={i}>\r\n                                                        <Col md={12} className=\"text-center\">{f.name}</Col>\r\n                                                        <Col md={12} className=\"\">\r\n                                                            <div className={\"rounded p-1 my-1\" + props.colormode.asClasses}>\r\n                                                                <ReactMarkdown children={f.value}/>\r\n                                                            </div>\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                )}\r\n                                            })}\r\n\r\n                                            <Row className=\"mb-3\">\r\n                                                <Col md={12} className=\"text-center\">\r\n                                                    <Likes startCount={props.data.like_list.length} itemId={props.data._id}/>\r\n                                                </Col>\r\n                                            </Row>\r\n\r\n                                            <Row>\r\n                                                <Col md={12} >\r\n                                                    <small className=\"text-muted float-right\"> {new Date(props.data.created).toLocaleDateString()}</small>\r\n                                                </Col>\r\n                                            </Row>\r\n\r\n                                        </Tab>\r\n                                        <Tab eventKey=\"comments\" title=\"Comments\"  tabClassName={props.colormode.asClasses}>\r\n                                            <Card.Body>\r\n                                                <CommentBox itemId={props.data._id} isOpen={(key === 'comments')} colormode={props.colormode}/>\r\n                                            </Card.Body>\r\n                                        </Tab>\r\n                                    </Tabs>\r\n                                </Card.Body>\r\n                            </Card>\r\n                        </Row>\r\n                    )\r\n                }\r\n","/mnt/h/XDev/Home/project-collections/client/src/main/Footer.jsx",["158","159"],"import React from 'react';\r\nimport { ColorContext } from '../core/context';\r\n\r\nexport default function Footer() {\r\n    return (\r\n        <ColorContext.Consumer>\r\n            {({colormode}) => (\r\n                <footer className={\"container text-center mt-2 py-2 \" + colormode.asClasses}>\r\n                    <p>\r\n                        © 2020-2021 Bla-Bla-Company, Inc.  ·\r\n                        <a href=\"#\"> BadLink#1 </a>\r\n                          ·\r\n                        <a href=\"#\"> BadLink#2 </a>\r\n                        <span></span>\r\n                    </p>\r\n                </footer>\r\n            )}\r\n        </ColorContext.Consumer>\r\n    )\r\n}\r\n","/mnt/h/XDev/Home/project-collections/client/src/main/Header.jsx",[],"/mnt/h/XDev/Home/project-collections/client/src/items/ItemForm.jsx",["160"],"import React, {useState, useEffect, useContext} from 'react';\r\nimport {Card, Form, Button, Col} from 'react-bootstrap';\r\nimport {useParams} from \"react-router-dom\";\r\nimport Tags from \"@yaireo/tagify/dist/react.tagify\"\r\nimport axios from 'axios';\r\nimport {ColorContext} from '../core/context';\r\nimport DropImageBox from '../drops/DropImageBox';\r\nimport CustomFields from './CustomFields';\r\n\r\nexport default function ItemForm() {\r\n    const {colormode} = useContext(ColorContext)\r\n    const {collection_id} = useParams();\r\n    const [scheme, setScheme] = useState([])\r\n    const [inputTags, setInputTags] = useState([])\r\n    const [whiteList, setWhiteList] = useState()\r\n    const [formData, setFormData] = useState({name: \"\"})\r\n    const [fieldsData, setFieldsData] = useState(new Array(15).fill(false))\r\n    const [prevUrl, setPrevUrl] = useState()\r\n    const [fileCont, setFileCont] = useState()\r\n\r\n    const onDropHandle = (afiles, rfiles, event) => {\r\n        if (afiles.length !== 0) {\r\n            let reader = new FileReader();\r\n            reader.onloadend = () => {\r\n                let url = reader.result\r\n                setPrevUrl(url);\r\n            }\r\n            reader.readAsDataURL(afiles[0])\r\n            setFileCont(afiles)\r\n        }\r\n    }\r\n\r\n    const tagsChangeHandle = (event) => {\r\n        event.persist();\r\n        let tags = []\r\n        let data = event.target.value ? JSON.parse(event.target.value): []\r\n        for (let i in data) {\r\n            tags.push(data[i].value);\r\n        }\r\n        setInputTags(tags);\r\n    }\r\n\r\n    const formChangeHandle = (event) => {\r\n        setFormData({...formData, [event.target.name]: event.target.value});\r\n    }\r\n\r\n    const fieldsChangeHandle = (event) => {\r\n        let tempData = fieldsData;\r\n        if (event.target.type === \"checkbox\") {\r\n            tempData[parseInt(event.target.id)] = event.target.checked;\r\n        } else if (event.target.type === \"number\") {\r\n            tempData[parseInt(event.target.id)] = parseInt(event.target.value);\r\n        } else if (event.target.type === \"date\") {\r\n            tempData[parseInt(event.target.id)] = new Date(event.target.value);\r\n        } else {\r\n            tempData[parseInt(event.target.id)] = event.target.value;\r\n        }\r\n        setFieldsData(tempData)\r\n    }\r\n\r\n    const formSubmitHandle = (event) => {\r\n        event.preventDefault();\r\n        axios.post('/api/collection/add', {\r\n            name: formData.name,\r\n            fields: fieldsData,\r\n            coll_id: collection_id,\r\n            tags: inputTags,\r\n            scheme: scheme\r\n        })\r\n        .then((res) => {\r\n            const item_id = res.data.item_id;\r\n            const data = new FormData();\r\n            data.append(\"item_id\", item_id);\r\n            data.append('image', fileCont[0]);\r\n            const config = {headers: {'Content-Type': 'multipart/form-data'}};\r\n            axios.post('/api/collection/image', data, config)\r\n            .then((res) => {\r\n                window.location.replace(`/collection/${collection_id}`)\r\n            })\r\n            .catch((err) => { console.log(err) });\r\n        })\r\n        .catch((err) => { console.log(err) })\r\n    }\r\n\r\n    useEffect( () => {\r\n        if (scheme.length === 0) {\r\n            axios.post('/api/collection/scheme', {coll_id: collection_id})\r\n            .then((res)=>{\r\n                setScheme(res.data)\r\n            })\r\n            .catch((err)=>{ })\r\n        }\r\n        if (!whiteList){\r\n            axios.get('/api/tag')\r\n            .then((res)=>{ let temp = []; res.data.forEach( (tag) => { temp.push(tag.name) }); setWhiteList(temp)})\r\n            .catch((err)=>{ console.log(err) })\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Card className={\"my-1\" + colormode.asClasses}>\r\n                <Form className={colormode.asClasses} onSubmit={formSubmitHandle}>\r\n                    <Card.Title className=\"text-center my-4\"> {'Create new item'}</Card.Title>\r\n                    <Form.Row className=\"justify-content-center\">\r\n                        <Col lg={4}>\r\n                            <Form.Group>\r\n                                <DropImageBox onDrop={onDropHandle} successFlag={prevUrl} prev={prevUrl}/>\r\n                            </Form.Group>\r\n                        </Col>\r\n                    </Form.Row>\r\n                    <Form.Row className=\"justify-content-center\">\r\n                        <Col lg={6} className=\"align-middle\">\r\n                            <Form.Group >\r\n                                <Form.Label > Item Name: </Form.Label>\r\n                                <Form.Control\r\n                                    required={true}\r\n                                    onChange={formChangeHandle}\r\n                                    type=\"text\"\r\n                                    name=\"name\"\r\n                                    className={colormode.asClasses}/>\r\n                            </Form.Group>\r\n                            <Form.Group>\r\n                                <Tags\r\n                                    value=''\r\n                                    whitelist={whiteList}\r\n                                    onChange={tagsChangeHandle}\r\n                                    placeholder=\"Tags\"\r\n                                    className={\"form-control form-control-sm c-tag border-light\" + colormode.asClasses}/>\r\n                            </Form.Group>\r\n                        </Col>\r\n                    </Form.Row>\r\n                    <Form.Row className=\"justify-content-center\">\r\n                        <CustomFields scheme={scheme} onChangeFunc={fieldsChangeHandle} colormode={colormode}/>\r\n                    </Form.Row>\r\n                    <Button variant=\"light\" type=\"submit\" className=\"float-right w-25\"> Create </Button>\r\n                </Form>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n","/mnt/h/XDev/Home/project-collections/client/src/collection/CollectionForm.jsx",[],"/mnt/h/XDev/Home/project-collections/client/src/profile/ProfileCard.jsx",[],"/mnt/h/XDev/Home/project-collections/client/src/collection/Field.jsx",[],"/mnt/h/XDev/Home/project-collections/client/src/drops/DropImageBox.jsx",["161","162","163","164"],"import React from 'react';\r\nimport Dropzone, {useDropzone} from 'react-dropzone'\r\n\r\nexport default function DropImageBox(props) {\r\n    const {getRootProps, getInputProps, acceptedFiles, fileRejections} = useDropzone()\r\n    return (\r\n        <Dropzone\r\n            onDrop={props.onDrop}\r\n            onDragEnter={(event)=>{event.target.classList.toggle ('dropbox-active')}}\r\n            onDragLeave={(event)=>{event.target.classList.toggle ('dropbox-active')}}\r\n            accept=\"image/jpg, image/jpeg, image/png\"\r\n            maxFiles={1}\r\n            maxSize={500000}\r\n            >\r\n            {({getRootProps, getInputProps}) => (\r\n                <section className=\"text-center\">\r\n                    <div {...getRootProps()}\r\n                        className={props.prev ?\r\n                            \"rounded  dropbox dropbox-success mx-auto\":\r\n                            \"rounded  dropbox mx-auto\"}\r\n                        style={{\r\n                            \"background-position\": \"center\",\r\n                            \"background-size\": \"contain\",\r\n                            \"background-image\": `url(${props.prev})`,\r\n                            \"background-origin\": \"content-box\",\r\n                            \"background-repeat\": \"no-repeat\"\r\n                        }}\r\n                        >\r\n                        <input {...getInputProps()}/>\r\n                        {props.prev ? '' : <p> Click here  or drop image</p>}\r\n                    </div>\r\n                </section>\r\n            )}\r\n        </Dropzone>\r\n    )\r\n}\r\n","/mnt/h/XDev/Home/project-collections/client/src/items/CustomFields.jsx",[],"/mnt/h/XDev/Home/project-collections/client/src/comments/CommentBox.jsx",["165"],"import React, {useState, useEffect} from 'react';\r\nimport {Row, Col} from 'react-bootstrap';\r\nimport axios from 'axios';\r\n\r\nimport Comment from './Comment';\r\nimport CommentForm from './CommentForm';\r\n\r\nexport default function CommentBox(props) {\r\n    const [firstLoad, setFirstLoad] = useState(true)\r\n    const [comments, setComments] = useState([])\r\n    const [intID, setIntID] = useState(null)\r\n\r\n    const getComments = ()=>{\r\n        console.log('- - - - - - - > ', new Date());\r\n        let params = {itemId: props.itemId}\r\n        axios.get('/api/comments', {params})\r\n        .then((res)=>{\r\n            setComments(res.data.comments)\r\n        })\r\n        .catch((err)=>{ console.log(err) })\r\n    }\r\n\r\n    useEffect(()=>{\r\n        if (firstLoad) { getComments(); setFirstLoad(false); }\r\n        if (props.isOpen && !intID) {\r\n            setIntID( setInterval(()=>{ getComments() }, 4999) );\r\n        } else if (!props.isOpen && intID) {\r\n            clearInterval(intID);\r\n            setIntID(null)\r\n        }\r\n    }, [props.isOpen])\r\n\r\n    return (\r\n        <Row className=\"mt-4 mx-auto\">\r\n            <Col lg={12} >\r\n                { comments.map((comment, index)=>{ return <Comment data={comment} key={index} colormode={props.colormode}/> })}\r\n                <CommentForm itemId={props.itemId} onSubmitGetComment={()=>{getComments()}} colormode={props.colormode}/>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n","/mnt/h/XDev/Home/project-collections/client/src/items/Likes.jsx",[],"/mnt/h/XDev/Home/project-collections/client/src/auth/GoogleAuth.jsx",["166"],"import React, {useState} from 'react';\r\nimport { GoogleLogin } from 'react-google-login';\r\nimport axios from 'axios';\r\n\r\n\r\nexport default function GoogleAuth(props) {\r\n    const responseGoogle = (response) => {\r\n        props.setLoadingState(true)\r\n        console.log(response.profileObj);\r\n        axios.post('/api/auth/google_signin', {googleProfileObj: response.profileObj})\r\n        .then((res)=>{\r\n            console.log(res);\r\n            localStorage.setItem('userData' , JSON.stringify({...res.data}));\r\n            window.location.replace('/')\r\n        })\r\n        .catch((err)=>{ console.log(err) })\r\n        props.setLoadingState(false)\r\n    }\r\n\r\n    return (\r\n        <GoogleLogin\r\n            clientId=\"442745189059-183d5c6v8o5314bpa433fe3u9h6qpg7v.apps.googleusercontent.com\"\r\n            render={renderProps => (\r\n                <button\r\n                    className=\"btn-sm btn-light btn-block my-1\"\r\n                    onClick={renderProps.onClick}\r\n                    disabled={renderProps.disabled}>\r\n                    Google\r\n                </button>\r\n            )}\r\n            onSuccess={responseGoogle}\r\n            onFailure={(res) => { console.error(res) }}\r\n            cookiePolicy={'single_host_origin'}\r\n            redirectUri=\"http://localhost:3000\"\r\n          />\r\n    )\r\n}\r\n","/mnt/h/XDev/Home/project-collections/client/src/auth/YandexAuth.jsx",["167","168","169","170"],"import React, {useState} from 'react';\r\nimport {Form, Button, Card} from 'react-bootstrap';\r\n\r\nexport default function YandexAuth() {\r\n    const CID = 'e26f7a74823a421990a54f202ad770a1'\r\n    const yandexAuthUrl = `https://oauth.yandex.ru/authorize?response_type=token&client_id=${CID}` //&display=popup\r\n\r\n    const clickHandle = ()=>{\r\n\r\n    }\r\n\r\n    return (\r\n        <Button\r\n            variant=\"light\"\r\n            className=\"mx-1\"\r\n            onClick={ clickHandle }\r\n            > Yandex\r\n        </Button>\r\n    )\r\n}\r\n","/mnt/h/XDev/Home/project-collections/client/src/collection/CollectionTable.jsx",["171","172","173","174","175","176","177","178","179"],"import React, {useContext, useState, useEffect} from 'react';\r\nimport {useParams} from \"react-router-dom\";\r\nimport {Table, Card, Button, ButtonGroup} from 'react-bootstrap';\r\nimport axios from 'axios';\r\nimport { useTable, useSortBy } from 'react-table'\r\nimport {TrashFill, PenFill} from 'react-bootstrap-icons';\r\n\r\nimport Item from '../items/Item';\r\nimport { AuthContext } from '../core/context';\r\nimport { ColorContext } from '../core/context';\r\n\r\nexport default function CollectionTable() {\r\n    const {collId} = useParams();\r\n    const {colormode} = useContext(ColorContext);\r\n    const [loading, setLoading] = useState(true);\r\n    const {isAuth, isAdmin, userId} = useContext(AuthContext);\r\n    const [collection, setCollection] = useState();\r\n    const [checkedItems, setCheckedItems] = useState([]);\r\n    const [colData, setColData] = useState([]);\r\n    const [cellData, setCellData] = useState([]);\r\n\r\n    const generateColumns = (field_mask) => {\r\n        let result = field_mask.filter((f,i) => !!f && !( i >= 6 && i < 9))\r\n        .map((f, i, ) => new Object({ Header: f, accessor: `col${field_mask.indexOf(f)}`}))\r\n        return [\r\n            { Header: \"Name\", accessor: `name`},\r\n            ...result,\r\n            { Header: \"Created\", accessor: `created`},\r\n            { Header: \"Tags\", accessor: `tags`}]\r\n    }\r\n\r\n    const generateData = (items) => {\r\n        let result = items.map((item, index) => Object.assign(\r\n            {\r\n                name: item.name,\r\n                created: new Date(item.created).toLocaleDateString(),\r\n                tags: item.tags_id.map(tag => tag.name).join(', '),\r\n            },\r\n            Object.fromEntries(\r\n                item.fieldset_id.fields.slice(0, 6)\r\n                .filter((f,i) => f !== null)\r\n                .map((f, i) => [`col${item.fieldset_id.fields.indexOf(f)}`, `${f.value}`])\r\n            ),\r\n            Object.fromEntries(\r\n                item.fieldset_id.fields.slice(9, 12)\r\n                .filter((f,i) => f !== null)\r\n                .map((f, i) => [`col${item.fieldset_id.fields.indexOf(f)}`, `${new Date(f.value).toLocaleDateString()}`])\r\n            ),\r\n            Object.fromEntries(\r\n                item.fieldset_id.fields.slice(12, 15)\r\n                .filter((f,i) => f !== null)\r\n                .map((f, i) => [`col${item.fieldset_id.fields.indexOf(f)}`, `${f.value ? 'Yes' : 'No'}`])\r\n            )\r\n        ))\r\n        return result;\r\n    }\r\n\r\n    useEffect(()=>{    /// layot\r\n        if (!collection) {\r\n            let params = {collection_id: collId}\r\n            axios.get('/api/collection', {params})\r\n            .then((res)=>{\r\n                setCollection(res.data);\r\n                setColData(generateColumns(res.data.field_mask))\r\n                setCellData(generateData(res.data.items))\r\n                setLoading(false)\r\n             })\r\n            .catch((err)=>{\r\n                console.log(err);\r\n                setLoading(false);\r\n            })\r\n        }\r\n    }, [])\r\n\r\n    const data = React.useMemo(() => [...cellData], [cellData])\r\n    const columns = React.useMemo(() => [...colData], [colData] )\r\n    const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = useTable({ columns, data }, useSortBy)\r\n\r\n    const getItemIdForRow = (tr) => {\r\n        let result;\r\n        collection.items.forEach((item, index) => {\r\n            if (item.name === tr.childNodes[1].textContent.trim()) {\r\n                result =  item._id;\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n\r\n    const editHandle = (event)=>{\r\n        console.log(getItemIdForRow(event.target.closest('tr')))\r\n    }\r\n\r\n    const deleteHandle = (event)=>{\r\n        console.log(getItemIdForRow(event.target.closest('tr')))\r\n    }\r\n\r\n    if (loading) { return ''} else {\r\n    return (\r\n        <Card className={\"my-1\" + colormode.asClasses}>\r\n            <Card.Header as=\"h5\">{`Collection \"${collection.name.toUpperCase()}\":`}</Card.Header>\r\n            <Card.Body>\r\n                <Button\r\n                    size=\"sm\"\r\n                    variant=\"success\"\r\n                    className=\"my-2 mx-1\">\r\n                    {'Add Item'}\r\n                </Button>\r\n                <Table size=\"sm\" bordered hover responsive variant={colormode.table}>\r\n                    <thead>\r\n                        { headerGroups.map(headerGroup => (\r\n                            <tr { ...headerGroup.getHeaderGroupProps() }>\r\n                                    <th></th>\r\n                                { headerGroup.headers.map(column => (\r\n                                    <th { ...column.getHeaderProps(column.getSortByToggleProps()) }>\r\n                                        {column.render('Header')}\r\n                                        <span> {column.isSorted ? column.isSortedDesc ? '↑' : '↓' : ''} </span>\r\n                                    </th>\r\n                                ))}\r\n                            </tr>\r\n                        ))}\r\n                    </thead>\r\n                    <tbody {...getTableBodyProps()}>\r\n                        { rows.map((row, index) => { prepareRow(row); return (\r\n                            <tr {...row.getRowProps()} >\r\n                                <td className=\"text-center\">\r\n                                    <ButtonGroup >\r\n                                        <Button size=\"sm\" variant=\"info\" onClick={editHandle}>\r\n                                            <PenFill color=\"white\" />\r\n                                        </Button>\r\n                                        <Button size=\"sm\" variant=\"danger\" onClick={deleteHandle}>\r\n                                            <TrashFill color=\"white\" />\r\n                                        </Button>\r\n                                    </ButtonGroup>\r\n                                </td>\r\n                                { row.cells.map(cell => { return (\r\n                                    <td {...cell.getCellProps()}> { cell.render('Cell')} </td>\r\n                                )})}\r\n                            </tr>\r\n                        )})}\r\n                    </tbody>\r\n                </Table>\r\n            </Card.Body>\r\n        </Card>\r\n    )}\r\n}\r\n","/mnt/h/XDev/Home/project-collections/client/src/profile/ColorModeSwitchButton.jsx",[],{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","replacedBy":"183"},{"ruleId":"184","severity":1,"message":"185","line":6,"column":8,"nodeType":"186","messageId":"187","endLine":6,"endColumn":18},{"ruleId":"188","severity":1,"message":"189","line":34,"column":8,"nodeType":"190","endLine":34,"endColumn":10,"suggestions":"191"},{"ruleId":"188","severity":1,"message":"192","line":35,"column":8,"nodeType":"190","endLine":35,"endColumn":10,"suggestions":"193"},{"ruleId":"184","severity":1,"message":"194","line":13,"column":12,"nodeType":"186","messageId":"187","endLine":13,"endColumn":18},{"ruleId":"188","severity":1,"message":"195","line":29,"column":7,"nodeType":"190","endLine":29,"endColumn":9,"suggestions":"196"},{"ruleId":"188","severity":1,"message":"197","line":30,"column":8,"nodeType":"190","endLine":30,"endColumn":10,"suggestions":"198"},{"ruleId":"184","severity":1,"message":"199","line":13,"column":12,"nodeType":"186","messageId":"187","endLine":13,"endColumn":19},{"ruleId":"184","severity":1,"message":"200","line":13,"column":21,"nodeType":"186","messageId":"187","endLine":13,"endColumn":27},{"ruleId":"201","severity":1,"message":"202","line":64,"column":106,"nodeType":"203","messageId":"204","endLine":64,"endColumn":108},{"ruleId":"201","severity":1,"message":"202","line":70,"column":111,"nodeType":"203","messageId":"204","endLine":70,"endColumn":113},{"ruleId":"201","severity":1,"message":"202","line":76,"column":116,"nodeType":"203","messageId":"204","endLine":76,"endColumn":118},{"ruleId":"201","severity":1,"message":"202","line":88,"column":98,"nodeType":"203","messageId":"204","endLine":88,"endColumn":100},{"ruleId":"205","severity":1,"message":"206","line":11,"column":25,"nodeType":"207","endLine":11,"endColumn":37},{"ruleId":"205","severity":1,"message":"206","line":13,"column":25,"nodeType":"207","endLine":13,"endColumn":37},{"ruleId":"188","severity":1,"message":"208","line":98,"column":8,"nodeType":"190","endLine":98,"endColumn":10,"suggestions":"209"},{"ruleId":"184","severity":1,"message":"210","line":5,"column":12,"nodeType":"186","messageId":"187","endLine":5,"endColumn":24},{"ruleId":"184","severity":1,"message":"211","line":5,"column":26,"nodeType":"186","messageId":"187","endLine":5,"endColumn":39},{"ruleId":"184","severity":1,"message":"212","line":5,"column":41,"nodeType":"186","messageId":"187","endLine":5,"endColumn":54},{"ruleId":"184","severity":1,"message":"213","line":5,"column":56,"nodeType":"186","messageId":"187","endLine":5,"endColumn":70},{"ruleId":"188","severity":1,"message":"214","line":31,"column":8,"nodeType":"190","endLine":31,"endColumn":22,"suggestions":"215"},{"ruleId":"184","severity":1,"message":"216","line":1,"column":16,"nodeType":"186","messageId":"187","endLine":1,"endColumn":24},{"ruleId":"184","severity":1,"message":"216","line":1,"column":16,"nodeType":"186","messageId":"187","endLine":1,"endColumn":24},{"ruleId":"184","severity":1,"message":"217","line":2,"column":9,"nodeType":"186","messageId":"187","endLine":2,"endColumn":13},{"ruleId":"184","severity":1,"message":"218","line":2,"column":23,"nodeType":"186","messageId":"187","endLine":2,"endColumn":27},{"ruleId":"184","severity":1,"message":"219","line":6,"column":11,"nodeType":"186","messageId":"187","endLine":6,"endColumn":24},{"ruleId":"184","severity":1,"message":"220","line":8,"column":8,"nodeType":"186","messageId":"187","endLine":8,"endColumn":12},{"ruleId":"184","severity":1,"message":"194","line":16,"column":12,"nodeType":"186","messageId":"187","endLine":16,"endColumn":18},{"ruleId":"184","severity":1,"message":"199","line":16,"column":20,"nodeType":"186","messageId":"187","endLine":16,"endColumn":27},{"ruleId":"184","severity":1,"message":"200","line":16,"column":29,"nodeType":"186","messageId":"187","endLine":16,"endColumn":35},{"ruleId":"184","severity":1,"message":"221","line":18,"column":12,"nodeType":"186","messageId":"187","endLine":18,"endColumn":24},{"ruleId":"184","severity":1,"message":"222","line":18,"column":26,"nodeType":"186","messageId":"187","endLine":18,"endColumn":41},{"ruleId":"223","severity":1,"message":"224","line":24,"column":26,"nodeType":"225","messageId":"226","endLine":24,"endColumn":91},{"ruleId":"188","severity":1,"message":"195","line":73,"column":8,"nodeType":"190","endLine":73,"endColumn":10,"suggestions":"227"},{"ruleId":"184","severity":1,"message":"228","line":77,"column":13,"nodeType":"186","messageId":"187","endLine":77,"endColumn":26},"no-native-reassign",["229"],"no-negated-in-lhs",["230"],"no-unused-vars","'YandexAuth' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'isAdmin', 'profileUserName', and 'username'. Either include them or remove the dependency array.","ArrayExpression",["231"],"React Hook useEffect has missing dependencies: 'largeColls', 'lastItems', and 'tagCloud'. Either include them or remove the dependency array.",["232"],"'isAuth' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'collId' and 'collection'. Either include them or remove the dependency array.",["233"],"React Hook useEffect has missing dependencies: 'items.length', 'location.pathname', and 'subject'. Either include them or remove the dependency array.",["234"],"'isAdmin' is assigned a value but never used.","'userId' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","React Hook useEffect has missing dependencies: 'collection_id', 'scheme.length', and 'whiteList'. Either include them or remove the dependency array.",["235"],"'getRootProps' is assigned a value but never used.","'getInputProps' is assigned a value but never used.","'acceptedFiles' is assigned a value but never used.","'fileRejections' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'firstLoad', 'getComments', and 'intID'. Either include them or remove the dependency array.",["236"],"'useState' is defined but never used.","'Form' is defined but never used.","'Card' is defined but never used.","'yandexAuthUrl' is assigned a value but never used.","'Item' is defined but never used.","'checkedItems' is assigned a value but never used.","'setCheckedItems' is assigned a value but never used.","no-new-object","The object literal notation {} is preferrable.","NewExpression","preferLiteral",["237"],"'getTableProps' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"238","fix":"239"},{"desc":"240","fix":"241"},{"desc":"242","fix":"243"},{"desc":"244","fix":"245"},{"desc":"246","fix":"247"},{"desc":"248","fix":"249"},{"desc":"242","fix":"250"},"Update the dependencies array to be: [isAdmin, profileUserName, username]",{"range":"251","text":"252"},"Update the dependencies array to be: [largeColls, lastItems, tagCloud]",{"range":"253","text":"254"},"Update the dependencies array to be: [collId, collection]",{"range":"255","text":"256"},"Update the dependencies array to be: [items.length, location.pathname, subject]",{"range":"257","text":"258"},"Update the dependencies array to be: [collection_id, scheme.length, whiteList]",{"range":"259","text":"260"},"Update the dependencies array to be: [firstLoad, getComments, intID, props.isOpen]",{"range":"261","text":"262"},{"range":"263","text":"256"},[1133,1135],"[isAdmin, profileUserName, username]",[1267,1269],"[largeColls, lastItems, tagCloud]",[1006,1008],"[collId, collection]",[1022,1024],"[items.length, location.pathname, subject]",[3684,3686],"[collection_id, scheme.length, whiteList]",[1027,1041],"[firstLoad, getComments, intID, props.isOpen]",[2999,3001]]